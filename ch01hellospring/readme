实现步骤：
1.创建maven项目
2.加入maven依赖
    spring的依赖
    junit依赖
3.创建类（）接口和他的实现类
    和没有使用框架一样，就是普通的类
4.创建spring需要使用的配置文件
    声明类的信息，这些类有spring创建管理
5.测试spring创建的对象。
-------------------------------------------------------------
在Spring的配置文件中，给java对象的属性赋值
di:依赖注入，表示创建对象，给属性赋值
di的实现有两种方式
1.在spring的配置文件中，使用标签和属性完成，叫做基于xml的di实现
2.使用spring中的注解，完成属性的赋值，叫做基于注解的di实现。


di的语法分类
1.set注入（设置注入）：spring调用类的set方法，在set方法可以实现属性的赋值
2.构造注入，spring调用类的有参构造方法,创建对象。在构造方法中完成赋值

实现步骤：
1.创建maven项目
2.加入maven依赖
    spring的依赖
    junit依赖
3.创建类（）接口和他的实现类
    和没有使用框架一样，就是普通的类
4.创建spring需要使用的配置文件
    声明类的信息，这些类有spring创建管理
    通过spring的语法完成属性的赋值
5.测试spring创建的对象。
-------------------------------------------------------------------------------------------
<!--声明studen对象
    注入：就是赋值的意思
    简单类型：spring中规定Java的基本数据类型和string都是简单类型
    di：给属性赋值
    1.set注入：spring调用类的set方法，你可以在set方法中完成属性的赋值
    1）简单类型的set注入
        <bean id="xx" class="xxxx">
            <property name="属性名字" value="此属性的值"/>
            一个property只能给一个属性赋值
    -->
-----------------------------------------------------------------------------------------
<!--引用类型的设值注入：spring调用类的set方法
    <bean id="xxx" class="xxx" >
        <property name="属性名称" ref="bean的id"/>
        </bean>
    -->
------------------------------------------------------------------------------------------
 <!--
        构造注入：spring是调用类的有参构造方法，在创建对象的同时，在构造方法中给属性赋值；
        构造注入使用的时<constyuctor-arg>标签
        <constyuctor-arg>标签：一个<constyuctor-arg>表示一个构造方法的一个参数；
        <constyuctor-arg>标签属性；
            name：表示构造方法的形参名；
            index：表示构造方法参数的位置，参数从左往右的位置是0，1，2，3......
            value:构造方法的形参类型是简单类型的使用value;
            ref:构造方法形参类型是引用类型的时候使用ref;
    -->
----------------------------------------------------------------------------------------------
